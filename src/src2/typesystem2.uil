// default is a namespace

const main = fn() {
    
}

const DemoComponent = component() {
    state value: i52 = 0;

    if value > 10, return .div(.button("Reset!", :onclick=fn() value = 0));

    let variable: i52 = 25; // this doesn't save. if you update it, it gets cleared next time the function is run, unlike state.
    // maybe state should be defined seperately like not in the fn body, idk
    if(variable != value) variable = value;

    return .div(
        .button ("--", :onclick=fn() value -= 1),
        ValueDisplay(variable),
        // uh oh here's an interesting one - how do you link this up?
        // the above code needs to run to get the value of variable, but the divs don't have to be recreated
        .button ("++", :onclick=fn() value += 1),
    );
}

const ValueDisplay = component(value: i52) {
    return .span("Value: ", value),
}

/// js

const DemoComponent = function(parent, __after_once) {
    const $value = watchable(0);

    const comment_node = …createComment();
    parent.insertBefore(comment_node, __after_once);

    let current_value = undefined;

    const update = () => {
        if(value > 10) {
            if(current_value) {
                if(current_value[0] == 0) return;
                current_value.removeSelf();
            }
            current_value = [0, ō.html("div", …).createBefore(parent, comment_node)];
            return;
        }
        if(current_value) {
            if(current_value[0] == 1) return;
            current_value.removeSelf();
        }
        current_value = [1, ō.html("div",
            ō.html("button", …),
            ValueDisplay(value),
            ō.html("button", …),
        ).createBefore(parent, comment_nod]e);
        return;
    };

    const watcher = ō.watch([$value], () => update());
    update();

    return {removeSelf() {
        watcher.unregister();
        current_value.removeSelf();
    }};
}

const ValueDisplay = component(value: i52) {
    
}