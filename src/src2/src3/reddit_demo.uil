const Action = widget(.client: ThreadClient, .action: Generic.Action, .parent_visible: boolean) html: {
    return switch(action) {
        .link => LinkButton[.id=client.id, .url=action.url, action.text],
        .reply => ReplyAction[…],
        .counter => CounterAction[.client = client, .action = action, .parens = true, .parent_visible = parent_visible],
        .delete => DeleteAction[.client = client, .action = action, .parent_visible = parent_visible],
    }
}

const DeleteAction = widget(.client: ThreadClient, .action: Generic.Action, .parent_visible: boolean) html: {
    state status = union{none, confirm, load, deleted, error: {msg: string}}: .none;

    const doDelete = fn() {
        status = .load;
        client.act(action.data) catch |e| {
            status = .error={msg: e.string};
            return;
        };
        status = .deleted;
    };

    return switch(status) {
        .none => LinkLikeButton("Delete", .onclick=fn() status = .confirm),
        .confirm => .span[
            "Are you sure? ",
            LinkLikeButton("Delete", .class=[.error], .onclick = fn() doDelete())
            " / ",
            LinkLikeButton("Cancel", .onclick = fn() status = .none),
        ],
        .load => .span["Loading…"],
        .deleted => .span["Deleted!"],
        .error => |emsg| .span[
            "Error while deleting: "+emsg.msg+" ",
            LinkLikeButton("Retry", .onclick = fn() status = .confirm),
        ],
    };
};

// maybe this could just be a call to the more generic counter action that uses portals? idk
// OH no nvm this can modify the parent, right.
const CounterAction = widget(.client: ThreadClient, .action: Generic.CounterAction*, .parens: boolean, .parent_visible: boolean) html: {
    return .span[.class=[.counter],
        LinkLikeButton(.class=[.counter_increment_btn, if(status.you == .increment) .counter_incremented]),
    ];
}


function renderAction(client: ThreadClient, action: Generic.Action, content_buttons_line: Node): HideShowCleanup<undefined> {
    if(action.kind === "link") linkButton(client.id, action.url).atxt(action.text).adto(content_buttons_line);
    else if(action.kind === "reply") {
        let prev_preview: {preview: Generic.Thread, remove: () => void} | undefined = undefined;
        let reply_state: "none" | {preview?: Generic.Thread} = "none";
        const reply_btn = linkLikeButton().atxt("Reply").adto(content_buttons_line);

        const hsc = hideshow();

        let reply_container: HTMLDivElement | undefined;

        hsc.on("cleanup", () => {
            if(prev_preview) {prev_preview.remove(); prev_preview = undefined}
        });
        
        const update = () => {
            if(reply_state === "none") {
                if(reply_container) {reply_container.remove(); reply_container = undefined}
                if(prev_preview) {prev_preview.remove(); prev_preview = undefined}
                reply_btn.disabled = false;
            }else{
                if(!reply_container) {
                    reply_container = el("div").adto(content_buttons_line);
                    const textarea = el("textarea").adto(el("div").adto(reply_container));
                    const submit = el("button").adto(reply_container).atxt("Reply");
                    const preview = el("button").adto(reply_container).atxt("Preview");
                    const cancel = el("button").adto(reply_container).atxt("Cancel");
                    preview.onev("click", () => {
                        reply_state = {preview: client.previewReply(textarea.value, action.reply_info)};
                        update();
                    });
                    // this might lag too much idk
                    textarea.onev("input", () => {
                        reply_state = {preview: client.previewReply(textarea.value, action.reply_info)};
                        update();
                    });
                    cancel.onev("click", () => {
                        const deleteres = textarea.value ? confirm("delete?") : true;
                        if(deleteres) {
                            reply_state = "none";
                            update();
                        }
                    });
                    submit.onev("click", () => {
                        submit.disabled = true;
                        submit.textContent = "…";
                        console.log("SUBMITTING");
                        client.sendReply(textarea.value, action.reply_info).then(r => {
                            console.log("Got response", r);
                            reply_state = "none";
                            update();
                            if(r.kind === "load_more") {
                                console.log("got back load more item. todo display it.");
                                return;
                            }
                            clientListing(client, r).defer(hsc).adto(el("div").adto(content_buttons_line));
                        }).catch(e => {
                            const error = e as Error;
                            submit.disabled = false;
                            submit.textContent = "Reply";
                            console.log("Got error", e);
                            const displayv = el("div").adto(content_buttons_line).clss("error").styl({'white-space': "pre-wrap"});
                            displayv.atxt(error.toString()+"\n\n"+error.stack);
                        });
                    });
                }
                reply_btn.disabled = true;
                label: if(reply_state.preview) {
                    if(prev_preview) {
                        if(prev_preview.preview === reply_state.preview) {
                            break label;
                        }
                        prev_preview.remove();
                        prev_preview = undefined;
                    }
                    // hacky for now. reply buttons should need a special override
                    // rather than being bundled with the rest of stuff in renderAction
                    const containerel = el("div").adto(content_buttons_line);
                    const listing_el = clientListing(client, reply_state.preview);
                    listing_el.associated_data.adto(containerel);
                    prev_preview = {
                        preview: reply_state.preview,
                        remove: () => {
                            listing_el.cleanup();
                            containerel.remove();
                        },
                    };
                }
            }
        };

        reply_btn.onev("click", () => {
            if(reply_state === "none") reply_state = {};
            update();
        });
        update();
    }else if(action.kind === "counter") {
        renderCounterAction(client, action, content_buttons_line, {parens: true});
    }else if(action.kind === "delete") {
        const resdelwrap = el("span").adto(content_buttons_line);
        const resyeswrap = el("span").adto(content_buttons_line);
        const resgonwrap = el("span").adto(content_buttons_line);
        const reserrwrap = el("span").adto(content_buttons_line);
        const resloadwrap = el("span").adto(content_buttons_line);

        const delbtn = linkLikeButton().atxt("Delete").adto(resdelwrap);

        resyeswrap.atxt("Are you sure? ");
        const confirmbtn = linkLikeButton().clss("error").atxt("Delete").adto(resyeswrap);
        resyeswrap.atxt(" / ");
        const nvmbtn = linkLikeButton().atxt("Cancel").adto(resyeswrap);

        resloadwrap.atxt("Deleting…");

        resgonwrap.atxt("Deleted!");

        type State = "none" | "confirm" | "load" | "deleted" | {error: string};
        const setv = (nv: State) => {
            resdelwrap.style.display = nv === "none" ? "" : "none";
            resyeswrap.style.display = nv === "confirm" ? "" : "none";
            resgonwrap.style.display = nv === "deleted" ? "" : "none";
            resloadwrap.style.display = nv === "load" ? "" : "none";
            reserrwrap.style.display = typeof nv !== "string" ? "" : "none";
            if(typeof nv !== "string") {
                reserrwrap.adch(el("span").clss("error").atxt(nv.error));
            }
        };
        setv("none");

        delbtn.onev("click", () => {
            setv("confirm");
        });
        confirmbtn.onev("click", () => {
            setv("load");
            client.act(action.data).then(r => {
                setv("deleted");
            }).catch(e => {
                console.log("Got error:", e);
                setv({error: e.toString()});
            });
        });
        nvmbtn.onev("click", () => {
            setv("none");
        });
    }else assertNever(action);
    return hideshow();
}
function renderCounterAction(client: ThreadClient, action: Generic.CounterAction, content_buttons_line: Node, opts: {parens: boolean}) {
    const wrapper = el("span").clss("counter").adto(content_buttons_line);
    const button = linkLikeButton().adto(wrapper).clss("counter-increment-btn");
    const btn_span = el("span").adto(button);
    const pretxt = txt("").adto(btn_span);
    const btxt = txt("…").adto(btn_span);
    const votecount = el("span").adto(wrapper.atxt(" ")).clss("counter-count");
    const votecount_txt = txt("…").adto(votecount);
    const percent_voted_txt = action.percent == null ? txt("—% upvoted") : txt(action.percent.toLocaleString(undefined, {style: "percent"}) + " upvoted");
    let decr_button: HTMLButtonElement | undefined;

    const state = {loading: false, pt_count: action.count_excl_you === "hidden" ? null : action.count_excl_you, your_vote: action.you};

    const getPointsText = () => {
        if(state.pt_count == null) return ["—", "[score hidden]"];
        const score_mut = state.pt_count + (state.your_vote === "increment" ? 1 : state.your_vote === "decrement" ? -1 : 0);
        return [scoreToString(score_mut), score_mut.toLocaleString()] as const;
    };

    const update = () => {
        const [pt_text, pt_raw] = getPointsText();
        btxt.nodeValue = {increment: action.incremented_label, decrement: action.decremented_label ?? "ERR", none: action.label}[state.your_vote ?? "none"];
        votecount_txt.nodeValue = opts.parens ? "(" + pt_text + ")" : pt_text;
        votecount.title = pt_raw;
        wrapper.classList.remove("counted-increment", "counted-decrement", "counted-reset");
        wrapper.classList.add("counted-"+(state.your_vote ?? "reset"));
        wrapper.classList.toggle("counted-loading", state.loading);
        button.disabled = state.loading;
        if(decr_button) decr_button.disabled = state.loading;
    };
    update();

    const doAct = (vote: undefined | "increment" | "decrement") => {
        if('error' in action.actions) {
            return alert("Error: "+action.actions.error);
        }
        const prev_vote = state.your_vote;
        state.your_vote = vote;
        state.loading = true;
        update();
        client.act(action.actions[vote ?? "reset"] ?? "error").then(() => {
            state.your_vote = vote;
            state.loading = false;
            update();
        }).catch(e => {
            state.your_vote = prev_vote;
            state.loading = false;
            update();
            console.log(e);
            alert("Got error: "+e);
        });
    };

    if(action.decremented_label != null) {
        pretxt.nodeValue = "⯅ ";
        wrapper.atxt(" ");
        decr_button = linkLikeButton().adch(el("span").atxt("⯆")).adto(wrapper).onev("click", () => {
            if(state.your_vote === "decrement") {
                doAct(undefined);
            }else{
                doAct("decrement");
            }
        }).clss("counter-decrement-btn");
    }
    button.onev("click", e => {
        if(state.your_vote === "increment") {
            doAct(undefined);
        }else{
            doAct("increment");
        }
    });

    return {percent_voted_txt, votecount};
}

const userLink = (client_id: string, href: string, name: string) => {
    const [author_color, author_color_dark] = getRandomColor(seededRandom(name));
    return linkButton(client_id, href)
        .styl({"--light-color": rgbToString(author_color), "--dark-color": rgbToString(author_color_dark)})
        .clss("user-link")
        .atxt(name)
    ;
};
