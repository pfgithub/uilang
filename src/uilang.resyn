file = decl[';'];

// eg namespace{} is decl[';']
decl =
	| ('pub' vardecl)<pubvariable>
	| vardecl
;

// cast syntax: <i32>some_expression();
// TODO prefix operators here
expression =
	| #operator((('+' '=')<pleq> | ('-' '=')<meq> | '='<eq>)<op>)<assignop>
	| #operator(('+'<plus> | '-'<minus>)<op>)<plusminusop>
	| #suffix(suffixop)<suffixop>
	| vardecl
	| function
	| namespaceexpr
	| returnstatement
	| htmlelement
	| htmlattribute
	| parens
	| block
	| variable
	| number
	| string
	| builtinexpr
;

builtinexpr = '@' identifier<name> '(' expression[',']<args> ')';

vardecl =
	(('var'<a> | 'let'<b>)<let> | 'const'<const_> | 'state'<state> | 'trigger'<trigger>)<vartype> #lockin()
	identifier<name> '=' expression<initv>
;

namespaceexpr = 'namespace' '{' decl[';']<body> '}';

// returns from a function, not a block or some parenthesis
returnstatement = 'return' expression;
htmlelement = '.' #lockin() identifier<tag> parens;
htmlattribute = ':' #lockin() identifier '=' expression;

// returns the last expression
parens = '(' #lockin() expression[',']<items> ')';
// can be broken out of (or returned if it's a function block)
block = '{' #lockin() expression[';']<decls> '}';

function = ('widget'<widget> | 'fn'<function>)<kind> #lockin() '(' identifier[',']<args> ')' expression;

variable = identifier<name> .;
number = :number;
string = :string_start<> #lockin() (:string | :string_escape<escape>)[]<bits> :string_end<>;

suffixop =
	| '!'<unused>
	| ('.' identifier)<fieldaccess>
	| ('(' expression[',']<args> ')')<call>
;

identifier = :identifier; // to allow for future expansion