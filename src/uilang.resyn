file = decl[';'];

// eg namespace{} is decl[';']
decl =
	| ('pub'?<public> vardecl)<vardecl>
    | '»'<todo>
;

// cast syntax: <i32>some_expression();
// TODO prefix operators here
// TODO expression should #lockin() and must be the last of any or
// TODO prefix addrof
expression =
	| #operator((('+' '=')<pleq> | ('-' '=')<meq> | '='<eq>)<op>)<assignop>
	| #operator((('=' '=')<eqeq> | ('!' '=')<neq>)<op>)<compareop>
	| #operator(('+'<plus> | '-'<minus>)<op>)<plusminusop>
	| #suffix(suffixop)<suffixop>
	| vardecl
    | onceexpr
    | deferexpr
	| function
	| namespaceexpr
	| returnstatement
    | array
	| dotitem
	| parens
	| block
	| variable
	| number
	| string
	| pipelineplaceholder
	| builtinexpr
    | multilinestringexpr
;

multilinestringexpr = ('\\' #lockin() 'lang' '=' '.' :identifier)?<langprefix> :multiline_string[]<strlines>;

pipelineplaceholder = '#' identifier?;

builtinexpr = '@' identifier<name> '(' expression[',']<args> ')';

vardecl =
	(('var'<a> | 'let'<b>)<let> | 'const'<const_> | 'state'<state> | 'memo'<memo> | 'trigger'<trigger>)<vartype> #lockin()
	identifier<name> '=' expression<initv>
;

namespaceexpr = 'namespace' '{' decl[';']<body> '}';

// returns from a function, not a block or some parenthesis
returnstatement = 'return' expression;

onceexpr = 'once' expression;
deferexpr = 'defer' expression;

dotitem = '.' #lockin() (htmlelement | htmlattribute | identifier<enumliteral>)<value>;
htmlelement = identifier<tag> array;
htmlattribute = identifier<attrname> '=' expression<value>;

// returns the last expression
parens = '(' #lockin() expression[',']<items> ')';
// returns all expressions in an array
array = '[' #lockin() (('…' expression)<spread> | expression)[',']<items> ']';
// can be broken out of (or returned if it's a function block)
block = '{' #lockin() expression[';']<decls> '}';

function = ('widget'<widget> | 'fn'<function>)<kind> #lockin() '(' identifier[',']<args> ')' expression;

variable = identifier<name> .; // TODO add a postprocessing thing so @"this kind of identifier" is converted into an []const u8 with a flag saying it originated as an @"" ident to disable builtin types eg @"i8"≠i8
number = :number;
string = :string_start<> #lockin() (:string | :string_escape<escape>)[]<bits> :string_end<>;

suffixop =
	| ('.' identifier)<fieldaccess>
	| ('^' expression)<pipeline>
	| ('catch' expression)<catchexpr>
	| ('orelse' expression)<orelseexpr>
	| ('(' expression[',']<args> ')')<call>
	| (':' expression)<implicitcast>
    | ('[' ']')<array_type>
    | ('?')<optional_type>
;

identifier = :identifier; // to allow for future expansion
