file = expression[';'];

expression =
	| #operator(('+' '=')<pleq> | ('-' '=')<meq>)<operator>
	| #suffix(suffixop)<suffixop>
	| vardecl
	| function
	| returnstatement
	| htmlelement
	| htmlattribute
	| parens
	| block
	| variable
	| number
	| string
;

vardecl = ('let'<let> | 'const'<const_> | 'state'<state> | 'trigger'<trigger>)<vartype> #lockin() identifier (':' ttype)?<ttype> '=' expression;
// returns from a function, not a block or some parenthesis
returnstatement = 'return' expression;
htmlelement = '.' #lockin() identifier parens;
htmlattribute = ':' #lockin() identifier '=' expression;

// returns the last expression
parens = '(' #lockin() expression[','] ')';
// can be broken out of (or returned if it's a function block)
block = '{' #lockin() expression[';'] '}';

function = ('widget'<widget> | 'fn'<function>)<kind> #lockin() '(' identifier[','] ')' expression;

variable = identifier;
number = :number;
string = :string_start<> #lockin() (:string | :string_escape<escape>)[]<bits> :string_end<>;

suffixop = '!';

identifier = :identifier; // to allow for future expansion

ttype = 'i54'<inttype> | 'f64'<floattype>