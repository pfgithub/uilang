decl = fndecl | vardecl | returnlyn | expressionlyn;
fndecl = fntype identifier '(' args ')' expression;
vardecl = vartype identifier ':' type '=' expression;
returnlyn = 'return' expression;
expressionlyn = expression;

expression =
	| htmlelement
	| htmlattribute
	| parens // (a, b, c) returns c
	| block // {a; b; c} returns Ã¸. choice: make parens the same as block? like do fndecls and vardecls? sure why not
	| number
	| string
;

parens = '(' decl[','] ')';
block = '{' decl[';'] '}';

// note: this still leaves room for . also being for union/enum literals, eg .enumkey or .unionkey{a=true}
htmlelement =
	'.' identifier '(' elembody ')' ?htmleventhandler
;

// .button () :: onclick |e| alert(e)
htmleventhandler = identifier expression;

// just a normal expression, meaning you can do eg .div (if (a) :title="hi" else :placeholder="lo"), as expected.
htmlattribute =
	':' identifier '=' expression
;

// :: this means a list seperated by ','. the last item may or may not have a comma.
elembody = ( expression )[','];

vartype = 'state' | 'trigger' | 'const' | 'let';
fntype = 'widget' | 'fn';
type = 'i54';