// in the future, this may be changed to (decl[';']<decl> ';'?) to make it easier to parse a wider range of things
file = decl[';']<decls>;
decl = :identifier<name> '=' component<value>;

component =
	| #operator("|")<or_op>
	// in the future, whitespace may be put into a token and this would be #operator(:_) and ^ would be #operator(:_ "|" :_)
	| #operator()<p_op>
	| #suffix(suffixop)
	| :identifier<decl_ref>
	| token_ref
	| parens
	| string
	| magic
	| force_struct
;
token_ref = ':' #lockin() :identifier<token>;
parens = '(' #lockin() component ')';
string = :string_start<> #lockin() (:string | :string_escape<escape>)[]<bits> :string_end<>;
// in the future, this may be changed to (component[',']<args> ','?) to make it easier to parse a wider range of things
magic = '#' #lockin() :identifier<name> '(' component[',']<args> ')';

suffixop =
	| nameset
	| array
	| optional
;

nameset = '<' #lockin() :identifier?<name> '>';
// a suffix operator, 'a'[] matches 'a' repeated
// in the future, #lockin() may be used after '[' for better error messages
array = '[' #lockin() component? ']';
optional = '?';
force_struct = '.';